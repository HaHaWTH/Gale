From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Martijn Muijsers <martijnmuijsers@live.nl>
Date: Wed, 30 Nov 2022 23:04:59 +0100
Subject: [PATCH] Optimize sun burn tick

License: GPL-3.0 (https://www.gnu.org/licenses/gpl-3.0.html)
Gale - https://galemc.org

This patch is based on the following patch:
"some entity micro opts"
By: Simon Gardling <titaniumtown@gmail.com>
As part of: JettPack (https://gitlab.com/Titaniumtown/JettPack)
Licensed under: GPL-3.0 (https://www.gnu.org/licenses/gpl-3.0.html)

diff --git a/net/minecraft/world/entity/Entity.java b/net/minecraft/world/entity/Entity.java
index 0bbac68dbd891da8892ba40fc18578c4f9e67c11..b68013f83db13f4aeb94be4777c5341ce8ebfde4 100644
--- a/net/minecraft/world/entity/Entity.java
+++ b/net/minecraft/world/entity/Entity.java
@@ -224,7 +224,7 @@ public abstract class Entity implements SyncedDataHolder, Nameable, EntityAccess
     public double xo;
     public double yo;
     public double zo;
-    private Vec3 position;
+    public Vec3 position; // Gale - JettPack - optimize sun burn tick - private -> public
     public BlockPos blockPosition; // Gale - Pufferfish - optimize entity coordinate key - private -> public
     private ChunkPos chunkPosition;
     private Vec3 deltaMovement = Vec3.ZERO;
@@ -2024,10 +2024,20 @@ public abstract class Entity implements SyncedDataHolder, Nameable, EntityAccess
 
     @Deprecated
     public float getLightLevelDependentMagicValue() {
+        return this.getLightLevelDependentMagicValue(BlockPos.containing(this.getX(), this.getEyeY(), this.getZ())); // Gale - JettPack - optimize sun burn tick - allow passing BlockPos to getLightLevelDependentMagicValue
+    }
+
+    // Gale start - JettPack - optimize sun burn tick - allow passing BlockPos to getLightLevelDependentMagicValue
+    /**
+     * @deprecated
+     */
+    @Deprecated
+    public float getLightLevelDependentMagicValue(BlockPos pos) {
         return this.level().hasChunkAt(this.getBlockX(), this.getBlockZ())
-            ? this.level().getLightLevelDependentMagicValue(BlockPos.containing(this.getX(), this.getEyeY(), this.getZ()))
+            ? this.level.getLightLevelDependentMagicValue(pos)
             : 0.0F;
     }
+    // Gale end - JettPack - optimize sun burn tick - allow passing BlockPos to getLightLevelDependentMagicValue
 
     public void absMoveTo(double x, double y, double z, float yRot, float xRot) {
         this.absMoveTo(x, y, z);
diff --git a/net/minecraft/world/entity/Mob.java b/net/minecraft/world/entity/Mob.java
index 2568a7f2459ed783d4612546b86d46721d48a396..f3eec8b75fcda47e6632a2a7db9a238b515bc8a0 100644
--- a/net/minecraft/world/entity/Mob.java
+++ b/net/minecraft/world/entity/Mob.java
@@ -1594,20 +1594,30 @@ public abstract class Mob extends LivingEntity implements EquipmentUser, Leashab
     protected void playAttackSound() {
     }
 
+    // Gale start - JettPack - optimize sun burn tick - cache eye blockpos
+    private BlockPos cached_eye_blockpos;
+    private net.minecraft.world.phys.Vec3 cached_position;
+    // Gale end - JettPack - optimize sun burn tick - cache eye blockpos
+
     public boolean isSunBurnTick() {
         if (this.level().isDay() && !this.level().isClientSide) {
-            float lightLevelDependentMagicValue = this.getLightLevelDependentMagicValue();
-            BlockPos blockPos = BlockPos.containing(this.getX(), this.getEyeY(), this.getZ());
-            boolean flag = this.isInWaterRainOrBubble() || this.isInPowderSnow || this.wasInPowderSnow;
-            if (lightLevelDependentMagicValue > 0.5F
-                && this.random.nextFloat() * 30.0F < (lightLevelDependentMagicValue - 0.4F) * 2.0F
-                && !flag
-                && this.level().canSeeSky(blockPos)) {
-                return true;
+            // Gale start - JettPack - optimize sun burn tick - optimizations and cache eye blockpos
+            if (this.cached_position != this.position) {
+                this.cached_eye_blockpos = BlockPos.containing(this.getX(), this.getEyeY(), this.getZ());
+                this.cached_position = this.position;
             }
+
+            float lightLevelDependentMagicValue = this.getLightLevelDependentMagicValue(cached_eye_blockpos); // Pass BlockPos to getBrightness
+
+            // Check brightness first
+            if (lightLevelDependentMagicValue <= 0.5F) return false;
+            if (this.random.nextFloat() * 30.0F >= (lightLevelDependentMagicValue - 0.4F) * 2.0F) return false;
+            // Gale end - JettPack - optimize sun burn tick - optimizations and cache eye blockpos
+            boolean flag = this.isInWaterRainOrBubble() || this.isInPowderSnow || this.wasInPowderSnow;
+            return !flag && this.level().canSeeSky(this.cached_eye_blockpos); // Gale - JettPack - optimize sun burn tick - optimizations and cache eye blockpos
         }
 
-        return false;
+        return false; // Gale - JettPack - optimize sun burn tick - optimizations and cache eye blockpos - diff on change
     }
 
     @Override
